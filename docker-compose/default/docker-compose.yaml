services:
  database:
    image: postgres:latest
    container_name: app-database
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    networks:
      - microservice-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 500m

  auth:
    image: bitnami/keycloak:latest
    container_name: app-keycloak
    ports:
      - "8090:8080"
      - "9000:9000"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KEYCLOAK_ENABLE_HEALTH_ENDPOINTS: true
      KEYCLOAK_DATABASE_HOST: app-database
      KEYCLOAK_DATABASE_PORT: 5432
      KEYCLOAK_DATABASE_USER: admin
      KEYCLOAK_DATABASE_PASSWORD: admin
    depends_on:
      database:
        condition: service_healthy
    networks:
      - microservice-network
    volumes:
      - keycloak_data:/opt/bitnami/keycloak
    healthcheck:
      test: "curl -f http://localhost:9000/health || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 500m

  redis:
    image: redis:latest
    container_name: local-redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3
      start_period: 5s
      timeout: 10s
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - microservice-network

  rabbitmq:
    image: rabbitmq:4.0-management-alpine
    container_name: local-rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-u", "guest:guest", "localhost:15672/api/healthchecks/node"]
      interval: 30s
      retries: 3
      start_period: 5s
      timeout: 10s
    ports:
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: unless-stopped
    networks:
      - microservice-network

  configserver:
    image: wraithkage/app-configserver:0.0.1-SNAPSHOT
    container_name: config-service
    depends_on:
      rabbitmq:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 500m
    healthcheck:
      test: "curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - microservice-network

  eureka:
    image: wraithkage/app-eureka:0.0.1-SNAPSHOT
    container_name: eureka-service
    deploy:
      resources:
        limits:
          memory: 500m
    networks:
      - microservice-network
    ports:
      - "8761:8761"
    depends_on:
      configserver:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      EUREKA_HOST: eureka-service
      CONFIG_SERVER_HOST: config-service
      RABBITMQ_HOST: local-rabbitmq
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  gateway:
    image: wraithkage/app-gateway:0.0.1-SNAPSHOT
    container_name: gateway-service
    deploy:
      resources:
        limits:
          memory: 500m
    ports:
      - "8080:8080"
    depends_on:
      configserver:
        condition: service_healthy
      eureka:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      CONFIG_SERVER_HOST: config-service
      EUREKA_HOST: eureka-service
      RABBITMQ_HOST: local-rabbitmq
      REDIS_HOST: local-redis
      OAUTH2_ISSUER_URI: http://app-keycloak:8080/realms/lotheas
      OAUTH2_JWK_SET_URI: http://app-keycloak:8080/realms/lotheas/protocol/openid-connect/certs

  media:
    image: wraithkage/app-media:s1
    container_name: media-service
    deploy:
      resources:
        limits:
          memory: 500m
    networks:
      - microservice-network
    depends_on:
      configserver:
        condition: service_healthy
      database:
        condition: service_healthy
      eureka:
        condition: service_healthy
    environment:
      CONFIG_SERVER_HOST: config-service
      EUREKA_HOST: eureka-service
      DB_USER: dbadmin
      DB_PASSWORD: 12345
      DB_HOST: app-database
      DB_DATABASE: app_media

  reaction:
    image: wraithkage/app-reaction:s1
    container_name: reaction-service
    deploy:
      resources:
        limits:
          memory: 500m
    networks:
      - microservice-network
    depends_on:
      configserver:
        condition: service_healthy
      database:
        condition: service_healthy
      eureka:
        condition: service_healthy
    environment:
      CONFIG_SERVER_HOST: config-service
      EUREKA_HOST: eureka-service
      DB_USER: dbadmin
      DB_PASSWORD: 12345
      DB_HOST: app-database
      DB_DATABASE: app_reaction

  users:
    image: wraithkage/app-users:s1
    container_name: users-service
    deploy:
      resources:
        limits:
          memory: 500m
    networks:
      - microservice-network
    depends_on:
      configserver:
        condition: service_healthy
      auth:
        condition: service_healthy
      eureka:
        condition: service_healthy
    environment:
      CONFIG_SERVER_HOST: config-service
      EUREKA_HOST: eureka-service

networks:
  microservice-network:
    driver: bridge
volumes:
  postgres_data:
  keycloak_data:
  redis_data: